@project: network chat room
@author: Cecilia

@Focus:
    Concurrency
    Networking
    GUI interface

@Function specs:
    Server:
	The server allows clients to connect and disconnect, receive messages, and send the messages to all connected clients.
    Client:
        The client connects to server and initiates a graphical interface that allows user to type in text and display the ongoing dialog.

@Usage:
This program models a server for a 1-to-N Server-client architechture based chatting room.
To use this tool, please follow the instructions as follows:

1. start the ChatServer program on the server host.
    USAGE: java ChatServer port
	optional command line arguments:
	    [port]: the port number to listen and accept the incoming connection request, 8000 by default.

2. start the ChatClient programs on the client hosts.
    USAGE: java ChatClient serverHost serverPort user
	optional command line arguments:
	    [serverHost]: the IP or host name of the server to be connected to, "localhost" by default.
	    [serverPort]: the port number the server is listening to, 8000 by default.
	    [user]: the user using the chatting client, "anonymous_user" by default.

NOTE: The client will fail to connect if the server is not turned on or wrong server host and port number are given.

@Design of Server:
    Data structure:
	--a list to store clients currently logged in. Moreover, an reentrant lock is used to avoid race condition caused by msg producer and msg distributor threads.
	--a blocking (FIFO) queue to store the messages to be sent out.

    Threads:
	--message producer: Each time a client connects, a new thread is created to handle the input from the client.
	--message distributor: A single separate thread is responsible for removing the messages from the queue and sending them to the all of the clients.
